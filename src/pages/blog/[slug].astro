---
import { getCollection, getEntry } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);

  // Ensure we always have a single-segment slug for the route param
  function routeSlug(entry) {
    if (entry?.slug && typeof entry.slug === "string") return entry.slug;
    if (entry?.id) {
      const noExt = String(entry.id).replace(/\.(md|mdx|markdown)$/i, "");
      return noExt.split("/").pop();
    }
    return "";
  }

  return posts
    .map((post) => routeSlug(post))
    .filter(Boolean)
    .map((slug) => ({ params: { slug } }));
}

const slug = String(Astro.params.slug ?? "");

// Try direct getEntry by slug first
let post = slug ? await getEntry("blog", slug) : null;

if (!post) {
  // Fallback: search the collection by slug OR id suffix (e.g., endsWith '/slug.mdx')
  const all = await getCollection("blog", ({ data }) => !data.draft);
  post =
    all.find((e) => e.slug === slug) ||
    all.find((e) =>
      String(e.id).replace(/\.(md|mdx|markdown)$/i, "").endsWith(`/${slug}`)
    ) ||
    all.find((e) =>
      String(e.id).replace(/\.(md|mdx|markdown)$/i, "") === slug
    ) ||
    null;
}

if (!post) {
  // If still not found, go back to blog list
  return Astro.redirect("/blog");
}

const { Content } = await post.render();
const data = post.data ?? {};
const { title = slug, description = "", seo, pubDate, tags } = data;

// Normalize optional fields safely
const keywords = Array.isArray(tags)
  ? tags
  : typeof tags === "string"
  ? tags.split(",").map((s) => s.trim()).filter(Boolean)
  : [];

const d = pubDate ? new Date(pubDate) : null;
const isoDate = d && !isNaN(+d) ? d.toISOString() : "";
const displayDate =
  d && !isNaN(+d)
    ? d.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      })
    : "";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{seo ?? title}</title>
    {description && <meta name="description" content={description} />}
    {keywords.length > 0 && (
      <meta name="keywords" content={keywords.join(", ")} />
    )}
    {isoDate && (
      <meta property="article:published_time" content={isoDate} />
    )}
  </head>
  <body>
    <main class="prose mx-auto px-4 py-10">
      <!-- 👇 Added .post-content class -->
      <article class="post-content">
        <h1>{title}</h1>
        {displayDate && <time datetime={isoDate}>{displayDate}</time>}
        <Content />
      </article>
    </main>
  </body>
</html>
